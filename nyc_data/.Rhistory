demo()
min(2,3)
max(-3,-4)
max(max(2,3),-3)
2+3
x<2
x < 2
x
def x< 2
def x
norm()
norm(.2)
2+3
help
plot
isTRUE(1=2)
isTRUE(1==2)
isTRUE(a==2)
isTRUE(a=2)
exit
quit()
date()
cal()
calendar()
help calendar
help("calendar")
??calendar
add(2,3)
sum(2,3)
div(2,3)
sub(2,3)
sum(2,-3)
plat(sin)
plot()
dim(2,3)
dim(2)
quit()
version
install.packages("RODBC")
install.packages("swirl")
x<-(1:20)
plot(x,log(x))
plot(x,log(x), type = 'b')
plot(x,log(x), type = 'a')
install.packages("devtools")
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
c(new_hope, empire_strikes, return_jedi)
matrix(c(new_hope, empire_strikes, return_jedi), byrow = TRUE, nrow = 3)
star_wars_matrix <- matrix(c(new_hope, empire_strikes, return_jedi), byrow = TRUE, nrow = 3)
star_wars_matrix
col_names_vector <- c("US", "non-US")
row_names_vector <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
col_names_vector
row_names_vector
rownames(star_wars_matrix) <- row_names_vector
colnames(star_wars_matrix) <- col_names_vector
star_wars_matrix
worldwide_vector <- rowsum(star_wars_matrix)
worldwide_vector <- rowSums(star_wars_matrix)
worldwide_vector
all_wars_matrix <- cbind(star_wars_matrix, worldwide_vector)
all_wars_matrix
star_wars_matrix
non_us_all  <-   mean(star_wars_matrix [,2])
non_us_all
non_us_some <-  mean(star_wars_matrix [1:2,2])
non_us_some
(314.4 + 247.9 + 165.8)/3
(314.4 + 247.9)/2
visitors <- star_wars_matrix / 5
visitors
visitors <- int(star_wars_matrix / 5 )
visitors <- star_wars_matrix / 5
visitors
visitors <- star_wars_matrix / 5.0
visitors
visitors <- star_wars_matrix / ticket_prices_matrix
ticket_prices_matrix <- matrix(c(5, 5, 6, 6, 7, 7), nrow = 3, byrow = TRUE, dimnames = list(movie_names, col_titles))
movie_names <- c("A New Hope","The Empire Strikes Back","Return of the Jedi")
col_titles <- c("US","non-US")
ticket_prices_matrix <- matrix(c(5, 5, 6, 6, 7, 7), nrow = 3, byrow = TRUE, dimnames = list(movie_names, col_titles))
visitors <- star_wars_matrix / ticket_prices_matrix
visitors
average_us_visitors <- mean(visitors[,1])
average_us_visitors
average_non_us_visitors <- mean(visitors[,2])
average_non_us_visitors
(92.19960 + 48.41250 + 44.18657) / 3
(62.88000 + 41.31667 + 23.68571)/3
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
gender_vector
factor_gender_vector <- factor(gender_vector)
factor_gender_vector
3 == (2 + 1)
"intermediate" != "r"
TRUE != FALSE
"Rchitect" != "rchitect"
TRUE == FALSE
(-6 * 14) != 17 -101
"useR" == "user"
TRUE == 1
(1 + 2) > 4
"dog" < "Cats"
TRUE <= FALSE
(-6 * 5 +2)  (-10 + 1)
(-6 * 5 +2) >= (-10 + 1)
"raining" <= "raining dogs"
(-6 * 5 +2) >= (-10 + 1)
"raining" <= "raining dogs"
TRUE > FALSE
(-6 * 5 +2) >= (-10 + 1)
"raining" <= "raining dogs"
TRUE > FALSE
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
linkedin > 15
linkedin <= 5
linkedin > facebook
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
linkedin
facebook
views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)
views
views == 13
views <= 14
views[2,] > views[1,] * 2
views[2,] >= views[1,] * 2
views[2,] >= views[1,] * 2
all_wars_matrix
all_wars_matrix
seq(2, 6, by = 2)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
star_wars_matrix <- rbind(new_hope, empire_strikes, return_jedi)
colnames(star_wars_matrix) <- c("US", "non-US")
rownames(star_wars_matrix) <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
star_wars_matrix
visitors <- star_wars_matrix / 5
visitors
visitors
box_office_all <- c(461, 314.4, 290.5, 247.9, 309.3, 165.8)
movie_names <- c("A New Hope","The Empire Strikes Back","Return of the Jedi")
col_titles <- c("US","non-US")
star_wars_matrix <- matrix(box_office_all, nrow = 3, byrow = TRUE, dimnames = list(movie_names, col_titles))
ticket_prices_matrix <- matrix(c(5, 5, 6, 6, 7, 7), nrow = 3, byrow = TRUE, dimnames = list(movie_names, col_titles))
ticket_prices_matrix
star_wars_matrix
visitors <- star_wars_matrix / ticket_prices_matrix
visitors
mean(visitors[,1])
mean(visitors[,2])
star_wars_matrix
sum(star_wars_matrix[1,])
sum(star_wars_matrix[,])
sum(star_wars_matrix[1:3,])
rowSums(star_wars_matrix)
message("Getting data for :",symstring)
library(ggplot2)
shinyServer(function(input, output) {
dataInput <- reactive({
symbolString <- input$symbol
#     startDate <- input$dates[1]
#     endDate <- input$dates[2]
#     message("Symbol = ",symbolString, ", startDate = ",startDate, " and endDate = ",endDate)
symstring <-
paste("http://ichart.finance.yahoo.com/table.csv?s=", symbolString)
message("Getting data for :",symstring)
data <- read.csv(symstring)
data$tradeDate = as.Date(data$Date, "%Y-%m-%d")
return (data)
})
plotInput <- reactive({
data <- dataInput()
startDate <- input$dates[1]
endDate <- input$dates[2]
minStartDateFromData <- min(data$tradeDate)
if(startDate < minStartDateFromData)
startDateMax <- minStartDateFromData
else
startDateMax <- startDate
message("StartDate = ",startDate, " ,EndDate = ",endDate, " and StartDateMax = ",startDateMax )
returnData <- subset(data, data$tradeDate >= startDateMax)
return (returnData)
})
#   finalInput <- reactive({
#     if (!input$adjust)
#       return(dataInput())
#     adjust(dataInput())
#   })
output$plot1 <- renderPlot({
scatterplot = ggplot()
scatterplot + ggtitle("Stock Price Evolution")
scatterplot + geom_line(data = plotInput(), aes(
x = tradeDate, y = Close, group = 1, col = ""
)) + labs(color = "Company")
#     symstring <- paste("http://ichart.finance.yahoo.com/table.csv?s=", symbolString)
#     print(symstring, startDate, endDate)
#     data <- read.csv(symstring)
#     data$tradeDate = as.Date(data$Date, "%Y-%m-%d")
#
#     scatterplot = ggplot()
#     scatterplot + ggtitle("Stock Price Evolution")
#     scatterplot + geom_line(data= data, aes(x=tradeDate, y = Close, group = 1, col="")) + labs(color="Company")
# scatterplot + labs(color="Legend text")`
#     ggplot(data,aes(x,y))+geom_line(aes(color="First line"))+
#       geom_line(data=df2,aes(color="Second line"))+
#       labs(color="Legend text")
})
})
install.packages("shiny")
library(ggplot2)
shinyServer(function(input, output) {
dataInput <- reactive({
symbolString <- input$symbol
#     startDate <- input$dates[1]
#     endDate <- input$dates[2]
#     message("Symbol = ",symbolString, ", startDate = ",startDate, " and endDate = ",endDate)
symstring <-
paste("http://ichart.finance.yahoo.com/table.csv?s=", symbolString)
message("Getting data for :",symstring)
data <- read.csv(symstring)
data$tradeDate = as.Date(data$Date, "%Y-%m-%d")
return (data)
})
plotInput <- reactive({
data <- dataInput()
startDate <- input$dates[1]
endDate <- input$dates[2]
minStartDateFromData <- min(data$tradeDate)
if(startDate < minStartDateFromData)
startDateMax <- minStartDateFromData
else
startDateMax <- startDate
message("StartDate = ",startDate, " ,EndDate = ",endDate, " and StartDateMax = ",startDateMax )
returnData <- subset(data, data$tradeDate >= startDateMax)
return (returnData)
})
#   finalInput <- reactive({
#     if (!input$adjust)
#       return(dataInput())
#     adjust(dataInput())
#   })
output$plot1 <- renderPlot({
scatterplot = ggplot()
scatterplot + ggtitle("Stock Price Evolution")
scatterplot + geom_line(data = plotInput(), aes(
x = tradeDate, y = Close, group = 1, col = ""
)) + labs(color = "Company")
#     symstring <- paste("http://ichart.finance.yahoo.com/table.csv?s=", symbolString)
#     print(symstring, startDate, endDate)
#     data <- read.csv(symstring)
#     data$tradeDate = as.Date(data$Date, "%Y-%m-%d")
#
#     scatterplot = ggplot()
#     scatterplot + ggtitle("Stock Price Evolution")
#     scatterplot + geom_line(data= data, aes(x=tradeDate, y = Close, group = 1, col="")) + labs(color="Company")
# scatterplot + labs(color="Legend text")`
#     ggplot(data,aes(x,y))+geom_line(aes(color="First line"))+
#       geom_line(data=df2,aes(color="Second line"))+
#       labs(color="Legend text")
})
})
shiny::runApp('C:/STUDY/MITx_R/shiny-apps/testapp1')
install.packages("haven")
install.packages("foreign")
install.packages("gdata")
install.packages("readxl")
help("package= maps")
help(package= maps)
library(maps)
figure(width = 800, padding_factor = 0) %>%
ly_map(database = "us.cities",regions = c("NY"), col = "gray") %>%
library(maps)
figure(width = 800, padding_factor = 0) %>%
ly_map(database = "us.cities",regions = c("NY"), col = "gray")
library(htmlwidgets)
library(stringr)
library(rbokeh)
library(maps)
figure(width = 800, padding_factor = 0) %>%
ly_map(database = "us.cities",regions = c("NY"), col = "gray")
library(maps)
figure(width = 800, padding_factor = 0) %>%
ly_map(database = "usaMapEnv",regions = c("NY"), col = "gray")
library(maps)
figure(width = 800, padding_factor = 0) %>%
ly_map(database = "usa",regions = c("NY"), col = "gray")
library(maps)
figure(width = 800, padding_factor = 0) %>%
ly_map(database = "usa",regions = c("New York"), col = "gray")
library(maps)
gmap("New York")
gmap(lat = 40 , lng = 75)
gmap(lat = 40 , lng = 75, zoom = 6, width = 600, height = 500)
gmap(lat = 40 , lng = -75, zoom = 6, width = 600, height = 500)
gmap(lat = 45 , lng = -75, zoom = 6, width = 600, height = 500)
gmap(lat = 35 , lng = -75, zoom = 6, width = 600, height = 500)
gmap(lat = 40 , lng = -75, zoom = 6, width = 600, height = 500)
setwd("C:/STUDY/MITx_R/shiny-apps/nyc_data")
library(htmlwidgets)
library(stringr)
library(rbokeh)
nyc_data <-
read.csv("NYPD_Motor_Vehicle_Collisions.csv", stringsAsFactors = FALSE)
str(nyc_data)
summary(nyc_data)
library(maps)
gmap(lat = 40.73306, lng = -73.97351, zoom = 12,
width = 680, height = 600,
map_style = gmap_style("blue_water")) %>%
ly_points(nyc_data$LONGITUDE, nyc_data$LATITUDE, data = nyc_data, hover = c(borough, dates, times))
library(maps)
gmap(lat = 40.73306, lng = -73.97351, zoom = 12,
width = 680, height = 600,
map_style = gmap_style("blue_water")) %>%
ly_points(nyc_data$LONGITUDE, nyc_data$LATITUDE, data = nyc_data, hover = c(BOROUGH, dates, times))
library(maps)
gmap(lat = 40.73306, lng = -73.97351, zoom = 12,
width = 680, height = 600,
map_style = gmap_style("blue_water")) %>%
ly_points(nyc_data$LONGITUDE, nyc_data$LATITUDE, data = nyc_data, hover = c(BOROUGH, DATE, TIME))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
